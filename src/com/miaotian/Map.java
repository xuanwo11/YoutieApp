package com.miaotian;

import java.util.Random;

import com.hfp.youtie.R;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;

public class Map {

	public static int W = 32, H = 32;

	// 19行，29列
	private int[][] map1 = {
			{ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
					3, 3, 3, 3, 3, 3, 3 },
			{ 3, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2,
					2, 2, 2, 2, 1, 1, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1,
					1, 1, 1, 1, 1, 2, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 1,
					3, 1, 3, 2, 3, 1, 3 },
			{ 3, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1,
					1, 1, 1, 2, 1, 1, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 2, 3, 1, 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2,
					2, 2, 2, 1, 1, 2, 3 },
			{ 3, 2, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1,
					1, 1, 1, 1, 1, 1, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1,
					1, 2, 1, 1, 1, 2, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
					1, 1, 2, 2, 2, 1, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1,
					1, 1, 1, 1, 1, 1, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2,
					1, 1, 2, 1, 1, 1, 3 },
			{ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
					3, 3, 3, 3, 3, 3, 3 } };
	private int[][] map2 = {
			{ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
					3, 3, 3, 3, 3, 3, 3 },
			{ 3, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1,
					1, 1, 1, 2, 2, 1, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 2, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 2, 3 },
			{ 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
					1, 1, 1, 1, 1, 2, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1,
					1, 1, 1, 1, 1, 1, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
					1, 2, 2, 2, 2, 1, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 2, 3, 1, 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1,
					1, 1, 1, 1, 1, 1, 3 },
			{ 3, 2, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
					1, 1, 1, 1, 1, 1, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1,
					1, 2, 2, 2, 2, 1, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
					1, 1, 1, 1, 1, 1, 3 },
			{ 3, 1, 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 2, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1,
					1, 2, 2, 2, 2, 2, 3 },
			{ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
					3, 3, 3, 3, 3, 3, 3 } };
	private int[][] map3 = {
			{ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
					3, 3, 3, 3, 3, 3, 3 },
			{ 3, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2,
					1, 1, 1, 2, 2, 2, 3 },
			{ 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 2, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 2, 3 },
			{ 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
					1, 2, 1, 1, 1, 2, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 2, 3, 1, 3, 2, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2,
					1, 1, 1, 1, 1, 1, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1,
					1, 1, 1, 1, 1, 2, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 2, 3, 1, 3, 1, 3, 2, 3, 1, 2, 1, 3, 2, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
					2, 2, 1, 1, 1, 1, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 2, 3, 1, 3, 1, 3, 2, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1,
					1, 1, 1, 1, 2, 1, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
					2, 2, 2, 1, 1, 2, 3 },
			{ 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
					3, 1, 3, 1, 3, 1, 3 },
			{ 3, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
					1, 1, 1, 2, 2, 2, 3 },
			{ 3, 1, 3, 2, 3, 2, 3, 1, 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 2, 3, 2,
					3, 1, 3, 1, 3, 2, 3 },
			{ 3, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
					1, 1, 1, 1, 1, 2, 3 },
			{ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
					3, 3, 3, 3, 3, 3, 3 } };
	public static int[][] map;
	private int nowRow = 0, nowCol = 0;
	// private Bitmap bit_map;
	private Bitmap[] bit_map;
	private int rowMax, colMax;
	public static int rowNum, colNum;
	public static int count;// 控制道具出现时间的变量
	public static int prop, door;// 每个关卡中出现的道具及门

	public Map(Context con) {
		Resources res = con.getResources();
		// bit_map = BitmapFactory.decodeResource(res, R.drawable.map);
		Bitmap temp = BitmapFactory.decodeResource(res, R.drawable.map);
		bit_map = new Bitmap[8];
		bit_map[0] = Bitmap.createBitmap(temp, 0, 0, W, H);
		bit_map[1] = Bitmap.createBitmap(temp, W, 0, W, H);
		bit_map[2] = Bitmap.createBitmap(temp, W * 2, 0, W, H);
		bit_map[3] = Bitmap.createBitmap(temp, W * 3, 0, W, H);
		bit_map[4] = Bitmap.createBitmap(temp, 0, H, W, H);
		bit_map[5] = Bitmap.createBitmap(temp, W, H, W, H);
		bit_map[6] = Bitmap.createBitmap(temp, W * 2, H, W, H);
		bit_map[7] = Bitmap.createBitmap(temp, W * 3, H, W, H);

		res = null;
		rowMax = MainView.SH % H > 0 ? MainView.SH / H + 2 : MainView.SH / H
				+ 1;
		colMax = MainView.SW % W > 0 ? MainView.SW / W + 2 : MainView.SW / W
				+ 1;
		rowNum = 19;
		colNum = 29;
		count = 0;
		switch (MainView.level % 3) {
		case 1:
			map = map1;
			break;
		case 2:
			map = map2;
			break;
		case 0:
			map = map3;
			break;
		}
		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[i].length; j++) {
				if (map[i][j] == 2) {
					count++;
				}
			}
		}
		Random random = new Random();
		prop = random.nextInt(count);
		do {
			door = random.nextInt(count);
		} while (prop == door);
		// prop = 1;
		// door = 2;
		count = 0;
	}

	public void drawMap(Canvas c, Paint paint, int offx, int offy) {
		updateMap(offx, offy);
		for (int i = nowRow; i < nowRow + rowMax; i++) {
			for (int j = nowCol; j < nowCol + colMax; j++) {
				c.save();
				c.clipRect(offx + j * W, offy + i * H, offx + j * W + W, offy
						+ i * H + H);
				// c.drawBitmap(bit_map, offx + j * W - ((map[i][j] - 1) % 4) *
				// W,
				// offy + i * H - ((map[i][j] - 1) / 4) * H, paint);
				c.drawBitmap(bit_map[map[i][j] - 1], offx + j * W,
						offy + i * H, paint);
				c.restore();
			}
		}
	}

	public void updateMap(int offx, int offy) {
		if (Math.abs(offy) < (rowNum - rowMax) * H) {
			nowRow = Math.abs(offy / H);
		} else {
			nowRow = rowNum - rowMax;
		}
		if (Math.abs(offx) < (colNum - colMax) * W) {
			nowCol = Math.abs(offx / W);
		} else {
			nowCol = colNum - colMax;
		}
	}
}
